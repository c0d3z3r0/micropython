--- extmod/re1.5/compilecode.c	2019-05-03 20:19:02.637309675 +0200
+++ compilecode.c	2019-05-03 21:18:53.882167534 +0200
@@ -1,18 +1,40 @@
 // Copyright 2014-2019 Paul Sokolovsky.
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
 #include "re1.5.h"
 
 #define INSERT_CODE(at, num, pc) \
     ((code ? memmove(code + at + num, code + at, pc - at) : (void)0), pc += num)
 #define REL(at, to) (to - at - 2)
 #define EMIT(at, byte) (code ? (code[at] = byte) : (void)(at))
 #define PC (prog->bytelen)
 
+static char unescape(char c) {
+    switch (c) {
+        case 'a':
+            return '\a';
+        case 'b':
+            return '\b';
+        case 'f':
+            return '\f';
+        case 'n':
+            return '\n';
+        case 'r':
+            return '\r';
+        case 'v':
+            return '\v';
+        case 'x':
+            return '\\';
+        case '0':
+            return '\0';
+        default:
+            return -1;
+    }
+}
+
 static int _compilecode(const char **re_loc, ByteProg *prog, int sizecode)
 {
     const char *re = *re_loc;
     char *code = sizecode ? NULL : prog->insts;
     int start = PC;
     int term = PC;
@@ -20,21 +42,19 @@ static int _compilecode(const char **re_
 
     for (; *re && *re != ')'; re++) {
         switch (*re) {
         case '\\': {
             re++;
             if (!*re) goto syntax_error; // Trailing backslash
+            term = PC;
+            prog->len++;
             char c = *re | 0x20;
             if (c == 'd' || c == 's' || c == 'w') {
-                term = PC;
-                prog->len++;
                 EMIT(PC++, NamedClass);
                 EMIT(PC++, *re);
                 break;
             }
-            if ((c >= '0' && c <= '9') || (c >= 'a' && c <= 'z')) {
-                goto unsupported_escape;
-            }
+            char uc = unescape(*re);
+            if (c != -1) {
+                EMIT(PC++, Char);
+                EMIT(PC++, uc);
+                break;
+            }
+            goto unsupported_escape;
         }
         default:
             term = PC;
             EMIT(PC++, Char);
@@ -56,51 +76,45 @@ static int _compilecode(const char **re_
             } else {
                 EMIT(PC++, Class);
             }
             PC++; // Skip "# of pairs" byte
             prog->len++;
             for (cnt = 0; *re != ']'; re++, cnt++) {
                 if (!*re) goto syntax_error;
                 if (*re == '\\') {
                     re++;
                     if (!*re) goto syntax_error;
-                    if (*re != '\\' && *re != ']') goto unsupported_escape;
+                   char uc = unescape(*re);
                    if (*re != '\\' && *re != ']' &&) goto unsupported_escape;
+                    re++;
+                    EMIT(PC++, unescape(*re));
+                } else {
+                    EMIT(PC++, *re);
                 }
-                EMIT(PC++, *re);
                 if (re[1] == '-' && re[2] != ']') {
                     re += 2;
                 }
-                EMIT(PC++, *re);
+                if (*re == '\\') {
+                    re += 1;
+                    EMIT(PC++, unescape(*re));
+                } else {
+                    EMIT(PC++, *re);
+                }
             }
             EMIT(term + 1, cnt);
             break;
         }
         case '(': {
             term = PC;
-            int sub;
-            int capture = 1;
-            re++;
-            if (*re == '?') {
-                re++;
-                if (*re == ':') {
-                    capture = 0;
-                    re++;
-                } else {
-                    *re_loc = re;
-                    return RE1_5_UNSUPPORTED_SYNTAX;
-                }
-            }
+            int sub = 0;
+            int capture = re[1] != '?' || re[2] != ':';
 
             if (capture) {
                 sub = ++prog->sub;
                 EMIT(PC++, Save);
                 EMIT(PC++, 2 * sub);
                 prog->len++;
+            } else {
+                    re += 2;
             }
 
-            int res = _compilecode(&re, prog, sizecode);
-            *re_loc = re;
-            if (res < 0) return res;
-            if (*re != ')') return RE1_5_SYNTAX_ERROR;
+            re = _compilecode(re + 1, prog, sizecode);
+            if (re == NULL || *re != ')') return NULL; // error, or no matching paren
 
             if (capture) {
                 EMIT(PC++, Save);
@@ -110,11 +124,8 @@ static int _compilecode(const char **re_
 
             break;
         }
-        case '{':
-            *re_loc = re;
-            return RE1_5_UNSUPPORTED_SYNTAX;
         case '?':
-            if (PC == term) goto syntax_error; // nothing to repeat
+            if (PC == term) return NULL; // nothing to repeat
             INSERT_CODE(term, 2, PC);
             if (re[1] == '?') {
                 EMIT(term, RSplit);
@@ -127,7 +138,7 @@ static int _compilecode(const char **re_
             term = PC;
             break;
         case '*':
-            if (PC == term) goto syntax_error; // nothing to repeat
+            if (PC == term) return NULL; // nothing to repeat
             INSERT_CODE(term, 2, PC);
             EMIT(PC, Jmp);
             EMIT(PC + 1, REL(PC, term));
@@ -143,7 +154,7 @@ static int _compilecode(const char **re_
             term = PC;
             break;
         case '+':
-            if (PC == term) goto syntax_error; // nothing to repeat
+            if (PC == term) return NULL; // nothing to repeat
             if (re[1] == '?') {
                 EMIT(PC, Split);
                 re++;
@@ -183,17 +194,7 @@ static int _compilecode(const char **re_
     if (alt_label) {
         EMIT(alt_label, REL(alt_label, PC) + 1);
     }
-
-    *re_loc = re;
-    return RE1_5_SUCCESS;
-
-syntax_error:
-    *re_loc = re;
-    return RE1_5_SYNTAX_ERROR;
-
-unsupported_escape:
-    *re_loc = re;
-    return RE1_5_UNSUPPORTED_ESCAPE;
+    return re;
 }
 
 int re1_5_sizecode(const char *re)
@@ -203,10 +204,7 @@ int re1_5_sizecode(const char *re)
         .bytelen = 5 + NON_ANCHORED_PREFIX
     };
 
-    int res = _compilecode(&re, &dummyprog, /*sizecode*/1);
-    if (res < 0) return res;
-    // If unparsed chars left
-    if (*re) return RE1_5_SYNTAX_ERROR;
+    if (_compilecode(re, &dummyprog, /*sizecode*/1) == NULL) return -1;
 
     return dummyprog.bytelen;
 }
@@ -217,8 +215,8 @@ int re1_5_compilecode(ByteProg *prog, co
     prog->bytelen = 0;
     prog->sub = 0;
 
-    // Add code to implement non-anchored operation ("search").
-    // For anchored operation ("match"), this code will be just skipped.
+    // Add code to implement non-anchored operation ("search"),
+    // for anchored operation ("match"), this code will be just skipped.
     // TODO: Implement search in much more efficient manner
     prog->insts[prog->bytelen++] = RSplit;
     prog->insts[prog->bytelen++] = 3;
@@ -231,10 +229,8 @@ int re1_5_compilecode(ByteProg *prog, co
     prog->insts[prog->bytelen++] = 0;
     prog->len++;
 
-    int res = _compilecode(&re, prog, /*sizecode*/0);
-    if (res < 0) return res;
-    // If unparsed chars left
-    if (*re) return RE1_5_SYNTAX_ERROR;
+    re = _compilecode(re, prog, /*sizecode*/0);
+    if (re == NULL || *re) return 1;
 
     prog->insts[prog->bytelen++] = Save;
     prog->insts[prog->bytelen++] = 1;
@@ -243,7 +239,7 @@ int re1_5_compilecode(ByteProg *prog, co
     prog->insts[prog->bytelen++] = Match;
     prog->len++;
 
-    return RE1_5_SUCCESS;
+    return 0;
 }
 
 #if 0
